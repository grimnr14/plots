}else{#return error, no shp
if("GEOID20" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE20" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE20",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid20
shp<-merge(shp,data,by.x="GEOID20",by.y=geoid,all.x=T)
}
}else{#return error, no shp
shp<-merge(shp,data,by.x="GEOID",by.y=geoid,all.x=T)
#print("Plausibly no suitable geoid to link from tigris")
}
}
if(length(var)==1){#for single variable plotting
tm<-tm_shape(shp)+
tm_fill(var,n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var,
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
}else{
tm<-NULL
for(i in 1:length(var)){
tmx<-tm_shape(shp)+
tm_fill(var[i],n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var[i],
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
tm<-tm+tmx
}
}
if(type=="leaflet"|type=="multi"){
tmap_leaflet(tm,show=F)
}else{
tm
}
#  tm
}
#the loadSHP function should streamline this a bit----
loadSHP<-function(state=NULL,geography="tract",year="2020",outdir=NULL,destfile=NULL){
year<-ifelse(as.numeric(year)<2020,2019,2023)
if(is.null(state)){#if whole nation, only retrieve .shp for state/county
if(geography=="state"){#for state
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/STATE/tl_",year,"_us_state.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,".zip")
}
if(geography=="county"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,".zip")
}
if(geography=="zcta5"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,".zip")
}
}else{#if state was specified, retrieve only for that area
st<-tigris::fips_codes
st<-st[st$state==state,]$state_code[[1]]#converts state abbreviation to fips code
if(geography=="county"){#still pulls everything if county, which should not be an issue
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
if(geography=="zcta5"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/zcta/","tl_",y,"_us_",g,"_",s,".zip")
}
if(geography=="tract"){#still pulls everything if zip, which should not be an issue
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/TRACT/tl_",year,"_",st,"_tract.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
if(geography=="bg"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/BG/tl_",year,"_",st,"_bg.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
}
download.file(url=url,destfile=destfile)#this retrieves from Census
shp<-readRDS(destfile)
#unzip(zipfile=destfile,exdir=outdir)#unzip to new output directory
#shp_files<-dir(outdir)[substr(dir(outdir),nchar(dir(outdir))-3,nchar(dir(outdir)))==".shp"]
#shp_files<-shp_files[str_detect(url,substr(shp_files,1,nchar(shp_files)-4))]
#shp<-st_read(dsn=paste0(outdir,paste0("\\",shp_files)))#then load directly as shp assuming only 1 file matches
#file.remove(paste0(outdir,dir(outdir)[str_detect(dir(outdir),substr(shp_files,1,nchar(shp_files)-4))]))
file.remove(paste0(outdir,"temp.zip"))
shp
}
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
print(flat_map(data=d1,#[d1$GEOID %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
#retrieve our shp files from tigris----
library(sf)#open shp files
library(tigris)#identifies zip by state and returns shp!!!
#load tmap and leaflet----
library(tmap)#main plotting library
library(leaflet)#interactive plotting for multiple layers and aesthetics
library(RColorBrewer)#adds color palettes to environment
flat_map<-function(data=NULL,#should be a data.frame with a valid geoid for fips or zcta5
shp=NULL,#can be manually provided but must be type sf data.frame from .shp (see Census)
year=2010,#should coincide with decennial Census and reflects updates to geometries
state=NULL,#most relevant for plotting zip, tract and bg. Please specify for these
geography="county",#select geography: state, county, zcta5, tract or bg
geoid=NULL,#user specified as whatever variable name exists in data file
var=NULL,#can be a single value for flat plotting or vector of variable names in data
type="flat",#specifies whether to return flat map, leaflet or multiple layer leaflet
bin=5,#number of levels to each fill in plot
palette="RdBu"#RColorBrewer palette for plotting fills. See brewer.pal.info
){
geography<-ifelse(geography=="zip code tabulation area","zcta",geography)
if(is.null(shp)){#if shp is not specified, retrieve defaults from tigris
shp<-loadSHP(state=state,geography=geography,year=year,outdir="./",destfile="temp.zip")
if(geography=="state"){
#shp<-states(year=year)#ignores state argument
}
if(geography=="county"){#select national counties or state specific
#if(is.null(state)){
#  shp<-counties(year=year)
#}else{
#  shp<-counties(state=state,year=year)
#}
}
#no choice on smaller geographies, must have a state argument
if(geography=="zcta5"){
#if(is.null(state)){
#  shp<-zctas(year=year)
#}else{
#  shp<-zctas(state=state,year=ifelse(as.numeric(year)>=2010,2010,2000))
#}
}
if(geography=="tract"){
#shp<-tracts(state=state,year=year)#ok tigris can do it all?
}
if(geography=="bg"){
#shp<-block_groups(state=state,year=year)
}
}
#the function merges and plots values specified with bin and palette being the only adjusted aesthetics
if("GEOID10" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE10" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE10",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid10
shp<-merge(shp,data,by.x="GEOID10",by.y=geoid,all.x=T)
}
}else{#return error, no shp
if("GEOID20" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE20" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE20",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid20
shp<-merge(shp,data,by.x="GEOID20",by.y=geoid,all.x=T)
}
}else{#return error, no shp
shp<-merge(shp,data,by.x="GEOID",by.y=geoid,all.x=T)
#print("Plausibly no suitable geoid to link from tigris")
}
}
if(length(var)==1){#for single variable plotting
tm<-tm_shape(shp)+
tm_fill(var,n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var,
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
}else{
tm<-NULL
for(i in 1:length(var)){
tmx<-tm_shape(shp)+
tm_fill(var[i],n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var[i],
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
tm<-tm+tmx
}
}
if(type=="leaflet"|type=="multi"){
tmap_leaflet(tm,show=F)
}else{
tm
}
#  tm
}
#the loadSHP function should streamline this a bit----
loadSHP<-function(state=NULL,geography="tract",year="2020",outdir=NULL,destfile=NULL){
year<-ifelse(as.numeric(year)<2020,2019,2023)
if(is.null(state)){#if whole nation, only retrieve .shp for state/county
if(geography=="state"){#for state
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/STATE/tl_",year,"_us_state.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,".zip")
}
if(geography=="county"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,".zip")
}
if(geography=="zcta5"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/zcta/","tl_",y,"_us_zcta.zip")
}
}else{#if state was specified, retrieve only for that area
st<-tigris::fips_codes
st<-st[st$state==state,]$state_code[[1]]#converts state abbreviation to fips code
if(geography=="county"){#still pulls everything if county, which should not be an issue
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
if(geography=="zcta5"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/zcta/","tl_",y,"_us_zcta_",s,".zip")
}
if(geography=="tract"){#still pulls everything if zip, which should not be an issue
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/TRACT/tl_",year,"_",st,"_tract.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
if(geography=="bg"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/BG/tl_",year,"_",st,"_bg.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
}
download.file(url=url,destfile=destfile)#this retrieves from Census
shp<-readRDS(destfile)
#unzip(zipfile=destfile,exdir=outdir)#unzip to new output directory
#shp_files<-dir(outdir)[substr(dir(outdir),nchar(dir(outdir))-3,nchar(dir(outdir)))==".shp"]
#shp_files<-shp_files[str_detect(url,substr(shp_files,1,nchar(shp_files)-4))]
#shp<-st_read(dsn=paste0(outdir,paste0("\\",shp_files)))#then load directly as shp assuming only 1 file matches
#file.remove(paste0(outdir,dir(outdir)[str_detect(dir(outdir),substr(shp_files,1,nchar(shp_files)-4))]))
file.remove(paste0(outdir,"temp.zip"))
shp
}
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
print(flat_map(data=d1,#[d1$GEOID %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
input<-"C:/Users/chris/OneDrive/Desktop/GeoHealth/scripts/"
output<-"C:/Users/chris/OneDrive/Desktop/GeoHealth/data/"
#read functions----
source(paste0(input,"pullACS/pullACS.R"))#contains CK api key
inc<-c(unique(fips_codes$state_code[fips_codes$state %in% state.abb]),"11")
setwd("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/education/plots/")
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
library(stringr)
library(zippeR)
y<-2019
g<-"zcta"
l<-"education_rnk"
s<-"AL"
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../education_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[!is.na(d1$education_rnk),c("GEOID","NAME",l)]
code<-fips_codes[fips_codes$state==s,]
zips<-zippeR::zi_list_zctas(year=y,state=code$state_code[1],method="intersect")
print(flat_map(data=d1,#[d1$GEOID %in% zips,],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
#retrieve our shp files from tigris----
library(sf)#open shp files
library(tigris)#identifies zip by state and returns shp!!!
#load tmap and leaflet----
library(tmap)#main plotting library
library(leaflet)#interactive plotting for multiple layers and aesthetics
library(RColorBrewer)#adds color palettes to environment
flat_map<-function(data=NULL,#should be a data.frame with a valid geoid for fips or zcta5
shp=NULL,#can be manually provided but must be type sf data.frame from .shp (see Census)
year=2010,#should coincide with decennial Census and reflects updates to geometries
state=NULL,#most relevant for plotting zip, tract and bg. Please specify for these
geography="county",#select geography: state, county, zcta5, tract or bg
geoid=NULL,#user specified as whatever variable name exists in data file
var=NULL,#can be a single value for flat plotting or vector of variable names in data
type="flat",#specifies whether to return flat map, leaflet or multiple layer leaflet
bin=5,#number of levels to each fill in plot
palette="RdBu"#RColorBrewer palette for plotting fills. See brewer.pal.info
){
geography<-ifelse(geography=="zip code tabulation area","zcta",geography)
if(is.null(shp)){#if shp is not specified, retrieve defaults from tigris
shp<-loadSHP(state=state,geography=geography,year=year,outdir="./",destfile="temp.zip")
if(geography=="state"){
#shp<-states(year=year)#ignores state argument
}
if(geography=="county"){#select national counties or state specific
#if(is.null(state)){
#  shp<-counties(year=year)
#}else{
#  shp<-counties(state=state,year=year)
#}
}
#no choice on smaller geographies, must have a state argument
if(geography=="zcta5"){
#if(is.null(state)){
#  shp<-zctas(year=year)
#}else{
#  shp<-zctas(state=state,year=ifelse(as.numeric(year)>=2010,2010,2000))
#}
}
if(geography=="tract"){
#shp<-tracts(state=state,year=year)#ok tigris can do it all?
}
if(geography=="bg"){
#shp<-block_groups(state=state,year=year)
}
}
#the function merges and plots values specified with bin and palette being the only adjusted aesthetics
if("GEOID10" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE10" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE10",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid10
shp<-merge(shp,data,by.x="GEOID10",by.y=geoid,all.x=T)
}
}else{#return error, no shp
if("GEOID20" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE20" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE20",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid20
shp<-merge(shp,data,by.x="GEOID20",by.y=geoid,all.x=T)
}
}else{#return error, no shp
shp<-merge(shp,data,by.x="GEOID",by.y=geoid,all.x=T)
#print("Plausibly no suitable geoid to link from tigris")
}
}
if(length(var)==1){#for single variable plotting
tm<-tm_shape(shp)+
tm_fill(var,n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var,
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
}else{
tm<-NULL
for(i in 1:length(var)){
tmx<-tm_shape(shp)+
tm_fill(var[i],n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var[i],
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
tm<-tm+tmx
}
}
if(type=="leaflet"|type=="multi"){
tmap_leaflet(tm,show=F)
}else{
tm
}
#  tm
}
#the loadSHP function should streamline this a bit----
loadSHP<-function(state=NULL,geography="tract",year="2020",outdir=NULL,destfile=NULL){
year<-ifelse(as.numeric(year)<2020,2019,2023)
if(is.null(state)){#if whole nation, only retrieve .shp for state/county
if(geography=="state"){#for state
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/STATE/tl_",year,"_us_state.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,".zip")
}
if(geography=="county"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,".zip")
}
if(geography=="zcta5"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/zcta/","tl_",y,"_us_zcta.zip")
}
}else{#if state was specified, retrieve only for that area
st<-tigris::fips_codes
st<-st[st$state==state,]$state_code[[1]]#converts state abbreviation to fips code
if(geography=="county"){#still pulls everything if county, which should not be an issue
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
if(geography=="zcta5"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/zcta/","tl_",y,"_us_zcta_",s,".zip")
}
if(geography=="tract"){#still pulls everything if zip, which should not be an issue
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/TRACT/tl_",year,"_",st,"_tract.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
if(geography=="bg"){
#url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/BG/tl_",year,"_",st,"_bg.zip")
url<-paste0("https://raw.githubusercontent.com/grimnr14/shpfiles/refs/heads/main/",y,"/",g,"/","tl_",y,"_us_",g,"_",s,".zip")
}
}
download.file(url=url,destfile=destfile)#this retrieves from Census
shp<-readRDS(destfile)
#unzip(zipfile=destfile,exdir=outdir)#unzip to new output directory
#shp_files<-dir(outdir)[substr(dir(outdir),nchar(dir(outdir))-3,nchar(dir(outdir)))==".shp"]
#shp_files<-shp_files[str_detect(url,substr(shp_files,1,nchar(shp_files)-4))]
#shp<-st_read(dsn=paste0(outdir,paste0("\\",shp_files)))#then load directly as shp assuming only 1 file matches
#file.remove(paste0(outdir,dir(outdir)[str_detect(dir(outdir),substr(shp_files,1,nchar(shp_files)-4))]))
file.remove(paste0(outdir,"temp.zip"))
shp
}
print(flat_map(data=d1,#[d1$GEOID %in% zips,],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
print(flat_map(data=d1,#[d1$GEOID %in% zips,],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
setwd("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/education/plots/")
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
library(stringr)
library(zippeR)
for(y in c(2019,2023)){
for(g in c("county",
"zcta",
"tract"
)){
for(l in c("education_rnk","education_state_rnk","education_score")){
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../education_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[!is.na(d1$education_rnk),c("GEOID","NAME",l)]
for(s in state.list){
code<-fips_codes[fips_codes$state==s,]
zips<-zippeR::zi_list_zctas(year=y,state=code$state_code[1],method="intersect")
if(g=="county"){
png(paste0("education_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[d1$GEOID %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
if(g=="zcta"|g=="zip code tabulation area"){
png(paste0("education_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[d1$GEOID %in% zips,],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
if(g=="tract"){
png(paste0("education_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[substr(d1$GEOID,1,5) %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
}
}
}
}
print(flat_map(data=d1,#[d1$GEOID %in% zips,],
year=ifelse(y<2020,2010,2020),
state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="leaflet"))
tigris::counties()
test2<-pullACS(geography="county",state=state.abb,geometry=F,year=2019,impute=T,impute.method="rpart",calc="education")
head(test2)
ex<-makeIndex(x=test2[,c("GEOID","pctWomenLTHS","pctpeoplewithlessthan9thgrade","pctpeoplewithatleasthseducation","pctAdults4yrDegree","medIncomeAdults4yrDegree","medEducatorIncome","pctProfessionalsInEducation","pctEnrolledSchool","pctAdultsInHigherEd","totalPrimarySecondaryVocationalSchools","preKProgramPerChild")],geoid="GEOID")
ex<-makeIndex(x=test2[,c("GEOID","pctWomenLTHS","pctpeoplewithlessthan9thgrade","pctpeoplewithatleasthseducation","pctAdults4yrDegree","medIncomeAdults4yrDegree","medEducatorIncome","pctProfessionalsInEducation","pctEnrolledSchool","pctAdultsInHigherEd","totalPrimarySecondaryVocationalSchools","preKProgramPerChild")],geoid="GEOID")
test2[,c("GEOID","pctWomenLTHS","pctpeoplewithlessthan9thgrade","pctpeoplewithatleasthseducation","pctAdults4yrDegree","medIncomeAdults4yrDegree","medEducatorIncome","pctProfessionalsInEducation","pctEnrolledSchool","pctAdultsInHigherEd","totalPrimarySecondaryVocationalSchools","preKProgramPerChild")]
ex<-makeIndex(x=test2[,c("GEOID","pctWomenLTHS","pctpeoplewithlessthan9thgrade","pctpeoplewithatleasthseducation","pctAdults4yrDegree","medIncomeAdults4yrDegree","medEducatorIncome","pctProfessionalsInEducation","pctEnrolledSchool","pctAdultsInHigherEd","totalPrimarySecondaryVocationalSchools","preKProgramPerChild")],geoid="GEOID")
ex<-makeIndex(x=test2[,c("GEOID","pctWomenLTHS","pctpeoplewithlessthan9thgrade","pctpeoplewithatleasthseducation","pctAdults4yrDegree","medIncomeAdults4yrDegree","medEducatorIncome","pctProfessionalsInEducation","pctEnrolledSchool","pctAdultsInHigherEd","totalPrimarySecondaryVocationalSchools","preKProgramPerChild","NAME")],geoid="GEOID")
ex
ex$factor_members
ex$fa_single
ex$fa_result

#"POP2010",
"POP2010","POP2010",
#"lapophalf",
"lapop1","lapop10",
#"lapophalf",
"lapop1","lapop10",
#"lapophalf",
"lapop1","lapop10",
rep(NA,6),
#"B01001_001",
rep(NA,2)
)
)
#testing exclusions
vars<-vars[vars$variable %in% c("lowaccesschildrenshare10","lowaccessseniorsshare10","lowaccesspopshare10","fastfoodrestaurants","fullservicerestaurants","conveniencestores","groceryfoodstores","supercentersandfoodclubstores","lowaccesschildrenshare1","lowaccesspopshare1","lowaccessseniorsshare1","novehiclesavailable","householdcashassistfoodorsnap","snapfamilysnap5p","lowaccesssnapshare1","lowaccesssnapshare10"),]
kable(vars,align=c("l","c","c"))%>%kable_styling(full_width=T)
lvars<-as.character(na.omit(unlist(str_split(unique(c(vars$numerator,vars$denominator)),"[+]"))))
lvars<-lvars[!is.na(as.numeric(substr(lvars,2,5)))]
print(lvars)
county<-pullACS(geography="county",variables=lvars,state=state.abb,geometry=F,year=2019,calc="food",calc.adi=T,survey="acs5")
print(class(county))
print(head(county))
x<-as.data.frame(county)#REMOVES sf attribute from object
x<-x[,c("GEOID",vars$variable)]#REMOVES geometry
x$NAME<-as.character(1:nrow(x))#NOTE that makeIndex requires a NAME value, but this is an arbitrary key used to interpret not link
obj<-makeIndex(x=x[complete.cases(x),],geoid="GEOID",nfactors=4,state=NULL,
set.factor=list(low_access_distal=c("lowaccesschildrenshare10","lowaccessseniorsshare10","lowaccesspopshare10"),
availability=c("fastfoodrestaurants","fullservicerestaurants","conveniencestores","groceryfoodstores","supercentersandfoodclubstores"),
low_access_proximal=c("lowaccesschildrenshare1","lowaccesspopshare1","lowaccessseniorsshare1","novehiclesavailable"),
assistance=c("householdcashassistfoodorsnap","snapfamilysnap5p","lowaccesssnapshare1","lowaccesssnapshare10")))
names(obj)
print(obj$pca_result)
years<-c(2019:2022)
outs<-NULL
for(i in years){
x<-pullACS(geography="county",state=state.abb,geometry=F,year=i,calc="food",calc.adi=F,survey="acs5")
#x<-x[,names(x) %in% names(hb18)]#set comparison data to the same attributes
x$NAME<-as.character(1:nrow(x))
x<-x[order(x$GEOID),!names(x) %in% c("geometry")]
obj<-makeIndex(x=x[complete.cases(x),],geoid="GEOID",nfactors=4,state=NULL,
set.factor=list(low_access_distal=c("lowaccesschildrenshare10","lowaccessseniorsshare10","lowaccesspopshare10"),
availability=c("fastfoodrestaurants","fullservicerestaurants","conveniencestores","groceryfoodstores","supercentersandfoodclubstores"),
low_access_proximal=c("lowaccesschildrenshare1","lowaccesspopshare1","lowaccessseniorsshare1","novehiclesavailable"),
assistance=c("householdcashassistfoodorsnap","snapfamilysnap5p","lowaccesssnapshare1","lowaccesssnapshare10")))
out<-data.frame(dataset=i,domain="food",geo="county",vars=nrow(vars),
pca.fit=obj$pca_result$fit,pca.fit.diagonal=obj$pca_result$fit.off,pca.PropVar=obj$pca_result$Vaccounted[[2]])
outs<-rbind(outs,out)
}
kable(outs,align=c("l","l","l","l","c","c","c"))%>%kable_styling(full_width=T)
geos<-c("county",
"zcta",
"tract")#,"block group")
outs<-NULL
for(i in geos){
if(i=="zcta"){
x<-pullACS(geography=i,state=NULL,geometry=F,year=2019,calc="food",calc.adi=F,survey="acs5")
}else{
x<-pullACS(geography=i,state=state.abb,geometry=F,year=2019,calc="food",calc.adi=F,survey="acs5")
}
#  x<-read.csv(paste0("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/food/food_original_pca_",i,"_2019.csv"))
#  x<-x[,names(x) %in% names(hb18)]#set comparison data to the same attributes
x$NAME<-as.character(1:nrow(x))
x<-x[order(x$GEOID),!names(x) %in% c("geometry")]
x<-x[complete.cases(as.data.frame(x)),]
obj<-makeIndex(x=x[complete.cases(x),],geoid="GEOID",nfactors=4,state=NULL,
set.factor=list(low_access_distal=c("lowaccesschildrenshare10","lowaccessseniorsshare10","lowaccesspopshare10"),
availability=c("fastfoodrestaurants","fullservicerestaurants","conveniencestores","groceryfoodstores","supercentersandfoodclubstores"),
low_access_proximal=c("lowaccesschildrenshare1","lowaccesspopshare1","lowaccessseniorsshare1","novehiclesavailable"),
assistance=c("householdcashassistfoodorsnap","snapfamilysnap5p","lowaccesssnapshare1","lowaccesssnapshare10")))
out<-data.frame(dataset=2019,domain="food",geo=i,vars=nrow(vars),
pca.fit=obj$pca_result$fit,pca.fit.diagonal=obj$pca_result$fit.off,pca.PropVar=obj$pca_result$Vaccounted[[2]])
outs<-rbind(outs,out)
}
kable(outs,align=c("l","l","l","l","c","c","c"))%>%kable_styling(full_width=T)
ex<-data.frame(county)
ex<-ex[substr(ex$GEOID,1,2) %in% unique(fips_codes[fips_codes$state %in% state.abb,]$state_code),
!names(ex) %in% c("geometry")]
ex<-ex[!substr(ex$GEOID,1,2) %in% c("02","15"),]#eliminate HI and AK for plotting
flat_map(data=ex,year=2019,geography="county",state=state.abb[!state.abb %in% c("HI","AK")],geoid="GEOID",var=c("food_rnk"),type="flat",bin=9)
zcta5<-pullACS(geography="zcta",state=NULL,calc="food",year=2019,geometry=F,calc.adi=F)
ex<-data.frame(zcta5)
flat_map(data=ex,year=2019,geography="zcta5",state="MD",geoid="GEOID",var=c("food_state_rnk"),type="flat",bin=9)
tract<-pullACS(geography="tract",state=state.abb,calc="food",year=2019,geometry=F,calc.adi=F)
ex<-data.frame(tract[substr(tract$GEOID,1,5)=="24510",])
shp=tracts(year=2019,state="MD")
shp<-shp[substr(shp$GEOID,1,5)=="24510",]
flat_map(data=ex,#[complete.cases(ex),],
shp=shp,year=2019,geography="tract",state="MD",geoid="GEOID",var="food_state_rnk",type="flat",bin=9)
ex<-data.frame(county)
ex<-ex[substr(ex$GEOID,1,2) %in% unique(fips_codes[fips_codes$state %in% state.abb,]$state_code),
!names(ex) %in% c("geometry")]
food<-round(ex$food_rnk,-1)
adi<-round(ex$rnk_adi,-1)
print(table(food,adi))
print(cor.test(food,adi,method="spearman"))
outs<-NULL
for(i in c("access_distal_score","availability_score","access_proximal_score","assistance_score")){
v1<-round(rank(ex[,i]),-1)
out<-cor.test(v1,adi,method="spearman")
outs<-rbind(outs,data.frame(subgroup=i,rho=out$estimate[[1]],p=out$p.value))
}
kable(outs,align=c("l","c","c"))%>%kable_styling(full_width=T)
outs<-NULL
exc<-c("WICS","WICSPTH","SNAPS","SNAPSPTH","REDEMPSNAPS","REDEMPWICS","PCSNAPBEN","PCWICREDEMP","FOODBANKS","FOODINSEC","CHFOODINSEC","VLFOODSEC","CHVLFOODSEC","lapophalf","lakidshalf","laseniorshalf","lasnaphalf","lapophalfshare","lakidshalfshare","laseniorshalfshare","lasnaphalfshare")
for(i in c("county",
"zcta",
"tract"#,
#"block group"
)){
if(i=="zcta"){
raw<-pullACS(geography=i,
variables=lvars,
state=NULL,geometry=F,year=2019,impute=F)
ex<-prepFood(year=2019,geography="zcta")
ex<-ex[,!names(ex) %in% exc]
raw<-merge(raw,ex,by.x="GEOID",by.y="GEOID",all.x=T)
}else{
raw<-pullACS(geography=i,
variables=lvars,
state=state.abb,geometry=F,year=2019,impute=F)
ex<-prepFood(year=2019,geography=i)
ex<-ex[,!names(ex) %in% exc]
raw<-merge(raw,ex,by.x="GEOID",by.y="GEOID",all.x=T)
}
p<-as.data.frame(md.pattern(raw))
count<-as.numeric(str_remove(rownames(p),"X"))
p<-p*as.numeric(round(count,0))
p[is.na(p)]<-0
names(p)<-c(names(p)[1:ncol(p)-1],"100% complete vars")
ex<-p%>%
summarise_each(funs=c("sum"))
ex<-data.frame(variable=rownames(t(ex)),complete.raw=t(ex)[,1])
ex$perc.raw.complete<-100*(ex$complete.raw/ex$complete.raw[1])
ex[ex$variable=="100% complete vars",]$perc.raw.complete<-100*(ex[ex$variable=="100% complete vars",]$complete.raw/ncol(raw))
ex<-ex[ex$perc.raw.complete<100,]
rownames(ex)<-NULL
ex$geo<-i
outs<-rbind(outs,ex)
}
kable(as.data.frame(outs),caption=paste0("Count complete in raw data year-2019"),align=c("l","c","c","r"))%>%kable_styling(full_width=T)
remove(zip)
gc()
outs<-NULL
for(j in c(2019:2023)){
print(j)
if(j %in% c(2018:2019)){
for(i in c("county","zip code tabulation area","tract")){#},"block group")){
print(i)
if(i=="block group"){
raw<-pullACS(geography=i,variables=c("B01001_001","B25001_001","B26001_001","B19113_001"),state=state.abb,geometry=F,year=j,impute=T)
}else{
raw<-pullACS(geography=i,variables=c("B01001_001","B25001_001","B26001_001","B19113_001"),state=state.abb,geometry=F,year=j,impute=F)
}
print(nrow(raw))
raw$total<-1
raw$valid<-ifelse(raw$B01001_001>100&!is.na(raw$B01001_001)&#has population >100 per ADI
raw$B25001_001>30&!is.na(raw$B25001_001)&
raw$B26001_001/raw$B01001_001<0.333&!is.na(raw$B26001_001),1,0)#and has food >30 per ADI
raw$population<-ifelse(raw$B01001_001>100&!is.na(raw$B01001_001),1,0)
raw$units<-ifelse(raw$B25001_001>30&!is.na(raw$B25001_001),1,0)
raw$group<-ifelse(raw$B26001_001/raw$B01001_001<0.333&!is.na(raw$B26001_001),1,0)
raw$year<-j
raw$geo<-i
outs<-rbind(outs,raw)
print(nrow(outs))
remove(raw)
gc()
}
}else{
for(i in c("county","zcta","tract")){#},"block group")){
print(i)
if(i=="tract"){
raw<-pullACS(geography=i,variables=c("B01001_001","B25001_001","B26001_001","B19113_001"),state=state.abb,geometry=F,year=j,impute=F)
print(nrow(raw))
raw$total<-1
raw$valid<-ifelse(raw$B01001_001>100&!is.na(raw$B01001_001)&#has population >100 per ADI and IMD methods at BG
raw$B25001_001>30&!is.na(raw$B25001_001)&
raw$B26001_001/raw$B01001_001<0.333&!is.na(raw$B26001_001),1,0)#and has food >30 per ADI and IMD methods at BG
raw$population<-ifelse(raw$B01001_001>100&!is.na(raw$B01001_001),1,0)
raw$units<-ifelse(raw$B25001_001>30&!is.na(raw$B25001_001),1,0)
raw$group<-ifelse(raw$B26001_001/raw$B01001_001<0.333&!is.na(raw$B26001_001),1,0)
raw$year<-j
raw$geo<-i
outs<-rbind(outs,raw)
print(nrow(outs))
remove(raw)
gc()
}else{
if(i=="block group"){
raw<-pullACS(geography=i,variables=c("B01001_001","B25001_001","B26001_001","B19113_001"),state=state.abb,geometry=F,year=j,impute=T)
}else{
raw<-pullACS(geography=i,variables=c("B01001_001","B25001_001","B26001_001","B19113_001"),state=NULL,geometry=F,year=j,impute=F)
}
print(nrow(raw))
raw$total<-1
raw$valid<-ifelse(raw$B01001_001>100&!is.na(raw$B01001_001)&#has population >100 per ADI and IMD methods at BG
raw$B25001_001>30&!is.na(raw$B25001_001)&
raw$B26001_001/raw$B01001_001<0.333&!is.na(raw$B26001_001),1,0)#and has food >30 per ADI and IMD methods at BG
raw$population<-ifelse(raw$B01001_001>100&!is.na(raw$B01001_001),1,0)
raw$units<-ifelse(raw$B25001_001>30&!is.na(raw$B25001_001),1,0)
raw$group<-ifelse(raw$B26001_001/raw$B01001_001<0.333&!is.na(raw$B26001_001),1,0)
raw$year<-j
raw$geo<-i
outs<-rbind(outs,raw)
print(nrow(outs))
remove(raw)
gc()
}
}
}
}
agg_total<-aggregate(data=outs,cbind(total,valid,population,units,group)~geo+year,FUN="sum")
agg_total$val<-paste0(round(100*((agg_total$total-agg_total$population)/agg_total$total),1),"%; ",
round(100*((agg_total$total-agg_total$units)/agg_total$total),1),"%; ",
round(100*((agg_total$total-agg_total$group)/agg_total$total),1),"%"
)
agg_total$geo<-ifelse(agg_total$geo=="zip code tabulation area","zcta",agg_total$geo)
agg_total$geo<-factor(agg_total$geo,ordered=T,levels=c("county","zcta", "tract","block group"))
ex<-tidyr::spread(data=agg_total[,c("geo","year","val")],key=year,value=val,fill="-")
kable(ex,align=c("l","c","c","c","c","c"))%>%kable_styling(full_width=T)
#creating annual food index files
#C Kitchen
#5-31-25
#set directories----
input<-"C:/Users/chris/OneDrive/Desktop/GeoHealth/scripts/"
output<-"C:/Users/chris/OneDrive/Desktop/GeoHealth/data/"
#read functions----
source(paste0(input,"pullACS/pullACS.R"))#contains CK api key
#pull non-imputed by year-geo----
inc<-c(unique(fips_codes$state_code[fips_codes$state %in% state.abb]),"11")
setwd("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/food/plots/")
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
library(stringr)
library(zippeR)
for(y in c(2019,2023)){
for(g in c("county",
"zcta",
"tract"
)){
for(l in c("food_rnk","food_state_rnk","food_score")){
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../food_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[!is.na(d1$food_rnk),c("GEOID","NAME",l)]
for(s in state.list){
code<-fips_codes[fips_codes$state==s,]
zips<-zippeR::zi_list_zctas(year=y,state=code$state_code[1],method="intersect")
if(g=="county"){
png(paste0("food_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[d1$GEOID %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
if(g=="zcta"|g=="zip code tabulation area"){
png(paste0("food_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[d1$GEOID %in% zips,],
year=ifelse(y<2020,2010,2020),state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
if(g=="tract"){
png(paste0("food_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[substr(d1$GEOID,1,5) %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
}
}
}
}
out<-read.csv(paste0(output,"food/combined food index 2018-2023.csv"),header=T)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
#setwd("C:\\Users\\ckitchen\\OneDrive - JHSPH\\Desktop")
#setwd("C:\\Users\\chris\\OneDrive\\Desktop\\GeoHealth\\scripts\\foodMap2")
#setwd("C:\\Users\\chris\\OneDrive\\Documents\\GitHub\\plots")
#remotes::install_version("rsconnect", "0.8.29")#make sure this is the working version of rsconnect, may need downgrade
library(shiny)
#install.packages('zipcodeR')
#install.packages('tidycensus')
#install.packages('tidyverse')
#install.packages('tmap')
#install.packages('magick')
library(zipcodeR)
library(tidycensus)
library(stringr)
#library(tidyverse)
#library(tmap)
library(magick)
library(usmap)
#options(tigris_use_cache=T)
#library(leaflet)
#library(bslib)
#source("https://raw.githubusercontent.com/grimnr14/SDH/refs/heads/main/pullACS.R")
#source("https://raw.githubusercontent.com/grimnr14/SDH/refs/heads/main/flatMap.R")
#d1<-read.delim(sprintf("https://docs.google.com/uc?id=%s&export=download","1yS3r0ll99fTdcmC6k7HwCmy0UzmavUju"),sep=",",header=T)
d1<-read.table("https://github.com/grimnr14/plots/raw/refs/heads/main/food/brief%20food%20index%202018-2023.csv",sep=",",header=T)
#gc()
#d1<-read.csv("https://github.com/grimnr14/plots/raw/refs/heads/main/brief%20food%20index%202018-2023.csv",header=T)
zip<-read.csv("https://github.com/grimnr14/geohealthdb/raw/refs/heads/main/list_zip5_output.csv",header=T)
zip$GEOID<-str_pad(zip$GEOID,width=5,side="left",pad="0")
#url<-paste0("https://raw.githubusercontent.com/grimnr14/plots/refs/heads/main/food_",s,"_",g,"_",y,"_",l,".png")
#https://drive.google.com/file/d/1Hw1hEblLqgJAEehXVUNfnPTdsGznIpfi/view?usp=drive_link#full list
#https://drive.google.com/file/d/1lIprCqIZJGyLPV0jCRs79PyHXuzG84jw/view?usp=drive_link#short list
#https://drive.google.com/file/d/1yS3r0ll99fTdcmC6k7HwCmy0UzmavUju/view?usp=sharing#brief list
d1<-d1[d1$geolevel!="geolevel",]
#d1$state<-substr(d1$geoid,8,9)
d1$geoid<-substr(d1$geoid,8,nchar(d1$geoid))
#ex<-zipcodeR::zcta_crosswalk
#ex$GEOID<-str_pad(ex$GEOID,width=11,side="left",pad="0")#pad tract fips
#ex$GEOID<-substr(ex$GEOID,1,2)#state fips
#ex<-ex[!duplicated(ex[,c("ZCTA5","GEOID")]),c("ZCTA5","GEOID")]
#d1<-merge(d1,ex[ex$GEOID %in% unique(d1$state),],by.x="geoid",by.y="ZCTA5",all.x=T)#merge state fips
#ex<-zipcodeR::zip_code_db[,c("zipcode","state")]
#names(ex)<-c("zipcode","state2")
#d1<-merge(d1,ex,by.x="geoid",by.y="zipcode",all.x=T)
#d1$state<-ifelse(d1$geolevel=="zcta",d1$GEOID,d1$state)#replace correct state for fips on zcta
#ex<-as.data.frame(tigris::states())[,c("STATEFP","STUSPS","NAME")]
#d1<-merge(d1,ex,by.x="state",by.y="STATEFP",all.x=T)
#d1<-d1[!is.na(d1$geoid)&!duplicated(d1),]
d1$state<-substr(d1$geoid,1,2)
ex<-as.data.frame(usmap::statepop)
d1<-merge(d1,ex,by.x="state",by.y="fips",all.x=T)
#zip<-zipcodeR::zip_code_db[,c("zipcode","state")]
d1<-merge(d1,zip[,c("GEOID","STATE","YEAR")],by.x=c("geoid","year"),by.y=c("GEOID","YEAR"),all.x=T)
d1$state<-ifelse(d1$geolevel=="zcta",d1$STATE,d1$abbr)
d1<-d1[!is.na(d1$state)&d1$state %in% state.abb,]
"
geo<-unique(d1$geolevel)
year<-unique(d1$year)
setwd('C:\\Users\\chris\\OneDrive\\Desktop\\GeoHealth\\scripts\\foodMap2')
for(g in geo){
for(y in year){
for(l in c('food_score','food_rnk','food_state_rnk')){
x<-d1[d1$geolevel==g&d1$year==y,c('geoid',l)]
x[,l]<-as.numeric(x[,l])
x<-x[!duplicated(x),]
for(s in state.abb){
if(g=='zcta'){
png(paste0('./food_',s,'_',g,'_',y,'_',l,'.png'),width=1080,height=1080)
print(flat_map(data=x,var=l,year=y,state=s,geography='zcta5',geoid='geoid',type='flat',bin=9))
dev.off()
}else{
png(paste0('./food_',s,'_',g,'_',y,'_',l,'.png'),width=1080,height=1080)
print(flat_map(data=x,var=l,year=y,geography=g,state=s,geoid='geoid',type='flat',bin=9))
dev.off()
}
}
remove(x)
gc()
}
}
}
"
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Mapping the GeoHealth Food Index"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 100,
value = 10),
sliderInput("size",
"Map image size:",
min=500,
max=2000,
value=1000),
selectInput("year",
"Year:",
choices=c("2019","2023"),
selected="2023"),
selectInput("geography",
"Geography:",
choices=c("county","zcta","tract"),
selected="county"),
selectInput("state",
"State:",
choices=state.abb,
selected="MD"),
radioButtons("level",
"Score/rank level:",
choiceNames=c("Raw score","National","State"),
choiceValues=c("food_score","food_rnk","food_state_rnk"),
selected="food_rnk")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
plotOutput("map")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x<-as.numeric(d1[d1[,"geolevel"]==input$geography&d1[,"year"]==input$year,input$level])
bins <- seq(min(na.omit(x)), max(na.omit(x)), length.out = input$bins + 1)
x2<-as.numeric(d1[d1[,"geolevel"]==input$geography&d1[,"year"]==input$year&d1[,"state"]==input$state,input$level])
bins2 <- seq(min(na.omit(x2)), max(na.omit(x2)), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(na.omit(x2), breaks = bins2, col = 'steelblue', border = 'black',
xlab = input$level,
main = paste0('Histogram of ',
ifelse(input$level=="food_score","food score",
ifelse(input$level=="food_rnk","National food rank",
ifelse(input$level=="food_state_rnk","State food rank",NA))),
" (",input$state,")"),lwd=1.5)
abline(v=mean(na.omit(x)),lty=2,lwd=2,col="black")
text(x=mean(na.omit(x))-5,ifelse(input$geography=="county",5,
ifelse(input$geography=="zcta",10,
ifelse(input$geography=="tract",50))),
labels=c(paste0("Natl:",round(mean(na.omit(x)),1))))
abline(v=mean(na.omit(x2)),lty=2,lwd=2,col="darkred")
text(x=mean(na.omit(x2))+5,ifelse(input$geography=="county",6,
ifelse(input$geography=="zcta",11,
ifelse(input$geography=="tract",51))),
labels=c(paste0("State:",round(mean(na.omit(x2)),1))))
legend("topleft",legend=c("National average","State average"),col=c("black","darkred"),lty=c(2,2),lwd=c(2,2),cex=1.2)
})
output$map<-renderImage({
s<-input$state
g<-input$geography
y<-input$year
l<-input$level
url<-paste0("https://raw.githubusercontent.com/grimnr14/plots/refs/heads/main/food/food_",s,"_",g,"_",y,"_",l,".png")
#url<-"https://github.com/grimnr14/plots/blob/main/food/food_AK_county_2019_food_rnk.png?raw=true"
p1<-image_read(url)
#    p1<-p1%>%image_resize(750)
p1<-p1%>%
image_resize(input$size)%>%
image_write(tempfile(fileext='png'),format='png')
list(src = p1, contentType = "image/png")
#x<-d1[d1[,"geolevel"]==input$geography&d1[,"year"]==input$year&d1[,"STUSPS"]==input$state,c("geoid","food_rnk","food_state_rnk")]
#x[,"food_rnk"]<-as.numeric(x[,"food_rnk"])
#x[,"food_state_rnk"]<-as.numeric(x[,"food_state_rnk"])
})
}
# Run the application
shinyApp(ui = ui, server = server)
s<-"MD"
g<-"zcta"
runApp('C:/Users/chris/OneDrive/Desktop/GeoHealth/scripts/FoodMap')
runApp('C:/Users/chris/OneDrive/Desktop/GeoHealth/scripts/FoodMap')
runApp('C:/Users/chris/OneDrive/Desktop/GeoHealth/scripts/FoodMap')
setwd("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/food/plots/")
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
library(stringr)
library(zippeR)
for(y in c(2019,2023)){
for(g in c("county",
"zcta",
"tract"
)){
for(l in c("food_rnk","food_state_rnk","food_score")){
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../food_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[!is.na(d1$food_rnk),c("GEOID","NAME",l)]
for(s in state.list){
code<-fips_codes[fips_codes$state==s,]
zips<-zippeR::zi_list_zctas(year=y,state=code$state_code[1],method="intersect")
if(g=="county"){
png(paste0("food_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[d1$GEOID %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
if(g=="zcta"|g=="zip code tabulation area"){
png(paste0("food_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[d1$GEOID %in% zips,],
year=ifelse(y<2020,2010,2020),state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
if(g=="tract"){
png(paste0("food_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,#[substr(d1$GEOID,1,5) %in% paste0(code$state_code,code$county_code),],
year=ifelse(y<2020,2010,2020),state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=8,type="flat"))
dev.off()
}
}
}
}
}
gc()

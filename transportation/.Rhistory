if(j %in% c("county","tract","block group")){
out<-out[substr(out$GEOID,1,2) %in% inc,]
}
write.table(out,paste0(output,"transportation/transportation_original_pca_",j,"_",i,".csv"),sep=",",col.names=T,row.names=F)
}else{
out<-pullACS(geography=j,variables=c("B01001_001","B25001_001","B26001_001"),geometry=F,year=i,state=NULL,impute=F,calc="transportation")
if(j %in% c("county","tract","block group")){
out<-out[substr(out$GEOID,1,2) %in% inc,]
}
write.table(out,paste0(output,"transportation/transportation_original_pca_",j,"_",i,".csv"),sep=",",col.names=T,row.names=F)
}
}
}
}
#pull cart-imputed by year-geo----
for(k in c(
"rpart"#,
#"lm",
#"mice"
)){
for(i in rev(c(2019:2023))){
if(i<=2019){
geos<-c("county"
,"zip code tabulation area"
,"tract"
#,"block group"
)#bg require imputed values and cannot be original pca
for(j in geos){
out<-pullACS(geography=j,variables=c("B01001_001","B25001_001","B26001_001"),geometry=F,year=i,state=state.abb,impute=T,impute.method=k,calc="transportation")
if(j %in% c("county","tract","block group")){
out<-out[substr(out$GEOID,1,2) %in% inc,]
}
write.table(out,paste0(output,"transportation/transportation_",k,"_imputed_pca_",j,"_",i,".csv"),sep=",",col.names=T,row.names=F)
}
}else{
geos<-c("county"
,"zcta"
,"tract"
#,"block group"
)
for(j in geos){
if(j %in% c("tract","block group")){
out<-pullACS(geography=j,variables=c("B01001_001","B25001_001","B26001_001"),geometry=F,year=i,state=state.abb,impute=T,impute.method=k,calc="transportation")
if(j %in% c("county","tract","block group")){
out<-out[substr(out$GEOID,1,2) %in% inc,]
}
write.table(out,paste0(output,"transportation/transportation_",k,"_imputed_pca_",j,"_",i,".csv"),sep=",",col.names=T,row.names=F)
}else{
out<-pullACS(geography=j,variables=c("B01001_001","B25001_001","B26001_001"),geometry=F,year=i,state=NULL,impute=T,calc="transportation")
if(j %in% c("county","tract","block group")){
out<-out[substr(out$GEOID,1,2) %in% inc,]
}
write.table(out,paste0(output,"transportation/transportation_",k,"_imputed_pca_",j,"_",i,".csv"),sep=",",col.names=T,row.names=F)
}
}
}
}
}
ex<-dir(paste0(output,"transportation/"))
ex<-ex[str_detect(ex,"rpart_")&str_detect(ex,"block group")==F]
for(i in ex){
imp<-read.csv(paste0(output,"transportation/",i),header=T)
ori<-read.csv(paste0(output,"transportation/transportation_original_pca_",substr(i,str_locate(i,pattern="pca_")[2][[1]]+1,nchar(i))),header=T)
new<-merge(imp,ori,by="GEOID",all=T)
charlim<-ifelse(str_detect(i,"county"),5,
ifelse(str_detect(i,"zcta")|str_detect(i,"zip code tabulation area"),5,
ifelse(str_detect(i,"tract"),11,
ifelse(str_detect(i,"block group"),12,NA))))
new$GEOID<-ifelse(nchar(new$GEOID)!=charlim,str_pad(new$GEOID,width=charlim,side="left",pad="0"),new$GEOID)
new$sumlevel<-ifelse(
nchar(new$GEOID)==5&str_detect(new$NAME.y,"ZCTA")==F,"050",
ifelse(
nchar(new$GEOID)==5&str_detect(new$NAME.y,"ZCTA")==T,"860",
ifelse(
nchar(new$GEOID)==11,"140",
ifelse(
nchar(new$GEOID)==12,"150",NA
)
)
)
)
new$source<-"ACS5"
new$year<-substr(i,nchar(i)-7,nchar(i)-4)
new$geolevel<-ifelse(
new$sumlevel=="050","county",
ifelse(new$sumlevel=="860","zcta",
ifelse(new$sumlevel=="140","tract",
ifelse(new$sumlevel=="150","bg",NA)))
)
new$geoname<-new$NAME.x
new$type<-ifelse(
is.na(new$transportation_rnk.x)&(new$B01001_001.x<=100|new$B25001_001.x<=30|(new$B26001_001.x/new$B01001_001.x)<=0.333),"suppressed",
ifelse(
is.na(new$transportation_rnk.y)&is.na(new$transportation_rnk.x),"missing",
ifelse(
!is.na(new$transportation_rnk.y)&!is.na(new$transportation_rnk.x),"original",
ifelse(
is.na(new$transportation_rnk.y)&!is.na(new$transportation_rnk.x),"imputed",
NA
)
)
)
)
new$geoid<-paste0(new$sumlevel,"00US",new$GEOID)
new$transportation_score<-round(new$transportation_score.x,4)
new$transportation_rnk<-round(new$transportation_rnk.x,4)
new$transportation_state_rnk<-round(new$transportation_state_rnk.x,4)
out<-new[,c("geoid","geoname","geolevel","sumlevel","year","source","type",
#"financial_score","ownership_score","building_quality_score","crowding_score",
"transportation_score","transportation_rnk","transportation_state_rnk")]
write.table(out,paste0(output,"transportation/combined transportation index 2019-2023.csv"),sep=",",qmethod="double",row.names=F,col.names=T,append=T)
print(out[1,])
}
out<-read.csv(paste0(output,"transportation/combined transportation index 2019-2023.csv"),header=T)
out<-out[out$year %in% c(2019,2023)&out$geolevel %in% c("county","tract"),
c("geoid",#"geoname",
"geolevel","year",
#"financial_score","ownership_score","building_quality_score","crowding_score",
"transportation_score","transportation_rnk","transportation_state_rnk")]
write.table(out,paste0(output,"transportation/brief transportation index 2019-2023.csv"),sep=",",qmethod="double",row.names=F,col.names=T)
setwd("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/transportation/plots/")
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
library(stringr)
library(zippeR)
for(y in c(2019,2023)){
for(g in c("county","zcta","tract")){
for(l in c("transportation_rnk","transportation_state_rnk","transportation_score")){
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../transportation_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[,c("GEOID","NAME",l)]
for(s in state.list){
png(paste0("transportation_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,year=y,state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=9,type="flat"))
dev.off()
}
}
}
}
library(stringr)
library(zippeR)
for(y in c(2019,2023)){
for(g in c("county","zcta","tract")){
for(l in c("transportation_rnk","transportation_state_rnk","transportation_score")){
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../transportation_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[,c("GEOID","NAME",l)]
for(s in state.list){
png(paste0("transportation_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,year=y,state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=9,type="flat"))
dev.off()
}
}
}
}
setwd("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/transportation/plots/")
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
library(stringr)
library(zippeR)
for(y in c(2019,2023)){
for(g in c("county","zcta","tract")){
for(l in c("transportation_rnk","transportation_state_rnk","transportation_score")){
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../transportation_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[,c("GEOID","NAME",l)]
for(s in state.list){
png(paste0("transportation_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,year=y,state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=9,type="flat"))
dev.off()
}
}
}
}
#retrieve our shp files from tigris----
library(sf)#open shp files
library(tigris)#identifies zip by state and returns shp!!!
#load tmap and leaflet----
library(tmap)#main plotting library
library(leaflet)#interactive plotting for multiple layers and aesthetics
library(RColorBrewer)#adds color palettes to environment
flat_map<-function(data=NULL,#should be a data.frame with a valid geoid for fips or zcta5
shp=NULL,#can be manually provided but must be type sf data.frame from .shp (see Census)
year=2010,#should coincide with decennial Census and reflects updates to geometries
state=NULL,#most relevant for plotting zip, tract and bg. Please specify for these
geography="county",#select geography: state, county, zcta5, tract or bg
geoid=NULL,#user specified as whatever variable name exists in data file
var=NULL,#can be a single value for flat plotting or vector of variable names in data
type="flat",#specifies whether to return flat map, leaflet or multiple layer leaflet
bin=5,#number of levels to each fill in plot
palette="RdBu"#RColorBrewer palette for plotting fills. See brewer.pal.info
){
if(is.null(shp)){#if shp is not specified, retrieve defaults from tigris
if(geography=="state"){
shp<-states(year=year)#ignores state argument
}
if(geography=="county"){#select national counties or state specific
if(is.null(state)){
shp<-counties(year=year)
}else{
shp<-counties(state=state,year=year)
}
}
#no choice on smaller geographies, must have a state argument
if(geography=="zcta5"){
if(is.null(state)){
shp<-zctas(year=year)
}else{
shp<-zctas(state=state,year=ifelse(as.numeric(year)>=2010,2010,2000))
}
}
if(geography=="tract"){
shp<-tracts(state=state,year=year)#ok tigris can do it all?
}
if(geography=="bg"){
shp<-block_groups(state=state,year=year)
}
}
#the function merges and plots values specified with bin and palette being the only adjusted aesthetics
if("GEOID10" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE10" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE10",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid10
shp<-merge(shp,data,by.x="GEOID10",by.y=geoid,all.x=T)
}
}else{#return error, no shp
if("GEOID20" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE20" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE20",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid20
shp<-merge(shp,data,by.x="GEOID20",by.y=geoid,all.x=T)
}
}else{#return error, no shp
shp<-merge(shp,data,by.x="GEOID",by.y=geoid,all.x=T)
#print("Plausibly no suitable geoid to link from tigris")
}
}
if(length(var)==1){#for single variable plotting
tm<-tm_shape(shp)+
tm_fill(var,n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var,
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
}else{
tm<-NULL
for(i in 1:length(var)){
tmx<-tm_shape(shp)+
tm_fill(var[i],n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var[i],
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
tm<-tm+tmx
}
}
if(type=="leaflet"|type=="multi"){
tmap_leaflet(tm,show=F)
}else{
tm
}
#  tm
}
#the loadSHP function should streamline this a bit----
loadSHP<-function(state=NULL,geography="tract",year="2020",outdir=NULL,destfile=NULL){
st<-tigris::fips_codes
st<-st[st$state==state,]$state_code[[1]]#converts state abbreviation to fips code
if(is.null(state)){#if whole nation, only retrieve .shp for state/county
if(geography=="state"){#for state
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/STATE/tl_",year,"_us_state.zip")
}
if(geography=="county"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
}
if(geography=="zcta5"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
}
}else{#if state was specified, retrieve only for that area
if(geography=="county"){#still pulls everything if county, which should not be an issue
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
}
if(geography=="zcta5"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
}
if(geography=="tract"){#still pulls everything if zip, which should not be an issue
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/TRACT/tl_",year,"_",st,"_tract.zip")
}
if(geography=="bg"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/BG/tl_",year,"_",st,"_bg.zip")
}
}
download.file(url=url,destfile=destfile)#this retrieves from Census
unzip(zipfile=destfile,exdir=outdir)#unzip to new output directory
shp_files<-dir(outdir)[substr(dir(outdir),nchar(dir(outdir))-3,nchar(dir(outdir)))==".shp"]
shp_files<-shp_files[str_detect(url,substr(shp_files,1,nchar(shp_files)-4))]
shp<-st_read(dsn=paste0(outdir,paste0("\\",shp_files)))#then load directly as shp assuming only 1 file matches
shp
}
setwd("C:/Users/chris/OneDrive/Desktop/GeoHealth/data/transportation/plots/")
source("https://raw.githubusercontent.com/grimnr14/R-functions/refs/heads/main/flatMap.R")
library(stringr)
library(zippeR)
for(y in c(2019,2023)){
for(g in c("county","zcta","tract")){
for(l in c("transportation_rnk","transportation_state_rnk","transportation_score")){
if(y==2019&g=="zcta"){
g<-"zip code tabulation area"
if(g=="zcta"|g=="zip code tabulation area"){
state.list<-NULL
}
}else{
state.list<-state.abb
}
d1<-read.csv(paste0("../transportation_rpart_imputed_pca_",g,"_",y,".csv"),header=T)
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&g=="county",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=5&(g=="zcta"|g=="zip code tabulation area"),str_pad(d1$GEOID,side="left",width=5,pad="0"),as.character(d1$GEOID))
d1$GEOID<-ifelse(nchar(d1$GEOID)!=11&g=="tract",paste0("0",d1$GEOID),as.character(d1$GEOID))
d1<-d1[,c("GEOID","NAME",l)]
for(s in state.list){
png(paste0("transportation_",s,"_",g,"_",y,"_",l,".png"),width=1600,height=1600)
print(flat_map(data=d1,year=y,state=s,var=l,geography=ifelse(g=="zcta"|g=="zip code tabulation area","zcta5",g),geoid="GEOID",palette="RdBu",bin=9,type="flat"))
dev.off()
}
}
}
}
install.packages('tmap')
#no choice on smaller geographies, must have a state argument
if(geography=="zcta5"){
if(is.null(state)){
shp<-zctas(year=year)
}else{
shp<-zctas(state=state,year=ifelse(as.numeric(year)>=2010,2010,2000))
}
}
#retrieve our shp files from tigris----
library(sf)#open shp files
library(tigris)#identifies zip by state and returns shp!!!
#load tmap and leaflet----
library(tmap)#main plotting library
library(leaflet)#interactive plotting for multiple layers and aesthetics
library(RColorBrewer)#adds color palettes to environment
flat_map<-function(data=NULL,#should be a data.frame with a valid geoid for fips or zcta5
shp=NULL,#can be manually provided but must be type sf data.frame from .shp (see Census)
year=2010,#should coincide with decennial Census and reflects updates to geometries
state=NULL,#most relevant for plotting zip, tract and bg. Please specify for these
geography="county",#select geography: state, county, zcta5, tract or bg
geoid=NULL,#user specified as whatever variable name exists in data file
var=NULL,#can be a single value for flat plotting or vector of variable names in data
type="flat",#specifies whether to return flat map, leaflet or multiple layer leaflet
bin=5,#number of levels to each fill in plot
palette="RdBu"#RColorBrewer palette for plotting fills. See brewer.pal.info
){
if(is.null(shp)){#if shp is not specified, retrieve defaults from tigris
if(geography=="state"){
shp<-states(year=year)#ignores state argument
}
if(geography=="county"){#select national counties or state specific
if(is.null(state)){
shp<-counties(year=year)
}else{
shp<-counties(state=state,year=year)
}
}
#no choice on smaller geographies, must have a state argument
if(geography=="zcta5"){
if(is.null(state)){
shp<-zctas(year=year)
}else{
shp<-zctas(state=state,year=ifelse(as.numeric(year)>=2010,2010,2000))
}
}
if(geography=="tract"){
shp<-tracts(state=state,year=year)#ok tigris can do it all?
}
if(geography=="bg"){
shp<-block_groups(state=state,year=year)
}
}
#the function merges and plots values specified with bin and palette being the only adjusted aesthetics
if("GEOID10" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE10" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE10",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid10
shp<-merge(shp,data,by.x="GEOID10",by.y=geoid,all.x=T)
}
}else{#return error, no shp
if("GEOID20" %in% names(as.data.frame(shp))){#if not geoid10, then error
if("ZCTA5CE20" %in% names(as.data.frame(shp))){#if zip, then use zcta5ce10
shp<-merge(shp,data,by.x="ZCTA5CE20",by.y=geoid,all.x=T)
}else{#if not zip, then use geoid20
shp<-merge(shp,data,by.x="GEOID20",by.y=geoid,all.x=T)
}
}else{#return error, no shp
shp<-merge(shp,data,by.x="GEOID",by.y=geoid,all.x=T)
#print("Plausibly no suitable geoid to link from tigris")
}
}
if(length(var)==1){#for single variable plotting
tm<-tm_shape(shp)+
tm_fill(var,n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var,
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
}else{
tm<-NULL
for(i in 1:length(var)){
tmx<-tm_shape(shp)+
tm_fill(var[i],n=bin,
palette=brewer.pal(bin,palette),
textNA="No Data",
colorNA="black",
alpha=0.85,
border.col="gray20",
border.alpha=0.8,
group=var[i],
midpoint=NA)+
tm_borders()+
tm_layout(legend.outside=T)
tm<-tm+tmx
}
}
if(type=="leaflet"|type=="multi"){
tmap_leaflet(tm,show=F)
}else{
tm
}
#  tm
}
#the loadSHP function should streamline this a bit----
loadSHP<-function(state=NULL,geography="tract",year="2020",outdir=NULL,destfile=NULL){
st<-tigris::fips_codes
st<-st[st$state==state,]$state_code[[1]]#converts state abbreviation to fips code
if(is.null(state)){#if whole nation, only retrieve .shp for state/county
if(geography=="state"){#for state
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/STATE/tl_",year,"_us_state.zip")
}
if(geography=="county"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
}
if(geography=="zcta5"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
}
}else{#if state was specified, retrieve only for that area
if(geography=="county"){#still pulls everything if county, which should not be an issue
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/COUNTY/tl_",year,"_us_county.zip")
}
if(geography=="zcta5"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/ZCTA510/tl_",year,"_us_zcta510.zip")
}
if(geography=="tract"){#still pulls everything if zip, which should not be an issue
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/TRACT/tl_",year,"_",st,"_tract.zip")
}
if(geography=="bg"){
url<-paste0("https://www2.census.gov/geo/tiger/TIGER",year,"/BG/tl_",year,"_",st,"_bg.zip")
}
}
download.file(url=url,destfile=destfile)#this retrieves from Census
unzip(zipfile=destfile,exdir=outdir)#unzip to new output directory
shp_files<-dir(outdir)[substr(dir(outdir),nchar(dir(outdir))-3,nchar(dir(outdir)))==".shp"]
shp_files<-shp_files[str_detect(url,substr(shp_files,1,nchar(shp_files)-4))]
shp<-st_read(dsn=paste0(outdir,paste0("\\",shp_files)))#then load directly as shp assuming only 1 file matches
shp
}
library(tmap)
